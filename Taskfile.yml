version: '3'

vars:
  CLUSTER_NAME: '{{.CLUSTER_NAME | default "test-infra"}}'
  K8S_VERSION: '{{.K8S_VERSION | default "v1.32.0"}}'
  KIND_VERSION: '{{.KIND_VERSION | default "v0.29.0"}}'
  WAIT_TIMEOUT: '{{.WAIT_TIMEOUT | default "300s"}}'
  TOOLS: kind kubectl kustomize flux
  # Local kubeconfig file - location depends on context
  KUBECONFIG_FILE:
    sh: |
      if [ -f "cluster/kind-config.yaml" ] && [ -f "components/flux/kustomization.yaml" ]; then
        echo "./kubeconfig"  # In test-infra repo
      else
        echo ".test-infra/kubeconfig"  # External repo
      fi
  # Detect if we're running in the test-infra repo or externally
  REPO_DIR:
    sh: |
      if [ -f "cluster/kind-config.yaml" ] && [ -f "components/flux/kustomization.yaml" ]; then
        echo "."
      else
        echo ".test-infra"
      fi
  # Repository URL for cloning when used externally
  REPO_URL: '{{.REPO_URL | default "https://github.com/datum-cloud/test-infra.git"}}'
  REPO_REF: '{{.REPO_REF | default "main"}}'
  # All file paths relative to REPO_DIR
  KIND_CFG: '{{.REPO_DIR}}/cluster/kind-config.yaml'

env:
  KIND_VERSION: '{{.KIND_VERSION}}'
  KUBECONFIG: '{{.KUBECONFIG_FILE}}'

tasks:
  ensure-repo:
    desc: "Ensure test-infra repository is available (clone if needed)"
    silent: true
    cmds:
      - |
        if [ "{{.REPO_DIR}}" != "." ]; then
          if [ ! -d "{{.REPO_DIR}}" ]; then
            echo "üì¶ Cloning test-infra repository to {{.REPO_DIR}}..."
            git clone {{.REPO_URL}} {{.REPO_DIR}}
            cd {{.REPO_DIR}}
            git checkout {{.REPO_REF}}
            echo "‚úÖ Repository cloned successfully (ref: {{.REPO_REF}})"
          else
            echo "‚úÖ Repository already exists at {{.REPO_DIR}}"
            cd {{.REPO_DIR}}
            # Fetch all refs to ensure we have tags and branches
            git fetch origin --tags --force
            git fetch origin

            # Check if REPO_REF is a tag, branch, or commit
            if git rev-parse --verify "{{.REPO_REF}}" >/dev/null 2>&1; then
              current_ref=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || git rev-parse HEAD)
              if [ "$current_ref" != "{{.REPO_REF}}" ]; then
                echo "üîÑ Switching from $current_ref to {{.REPO_REF}}..."
                git checkout {{.REPO_REF}}
              fi
            else
              echo "‚ö†Ô∏è  Reference '{{.REPO_REF}}' not found, trying as remote branch..."
              git checkout -B {{.REPO_REF}} origin/{{.REPO_REF}} || {
                echo "‚ùå Failed to checkout '{{.REPO_REF}}'"
                exit 1
              }
            fi

            # Only pull if it's a branch (not a tag or detached HEAD)
            if git symbolic-ref -q HEAD >/dev/null; then
              git pull origin {{.REPO_REF}} 2>/dev/null || true
            fi

            echo "‚úÖ Repository updated (ref: {{.REPO_REF}})"
          fi
        else
          echo "‚úÖ Running in source repository"
        fi

  help:
    desc: "Show organized help with command groups"
    silent: true
    cmds:
      - echo "Available commands for test-infra:"
      - echo ""
      - echo "üöÄ Cluster Management:"
      - echo "  cluster-up              Spin everything up"
      - echo "  cluster-down            Delete the cluster"
      - echo "  cluster-reset           Delete and recreate cluster from scratch"
      - echo ""
      - echo "üîç Cluster Inspection:"
      - echo "  cluster-status          Show cluster status and health"
      - echo "  kubectl                 Run kubectl commands (pass args with --)"
      - echo "  k9s                     Launch k9s to browse test-infra cluster"
      - echo ""
      - echo "üîß Setup & Infrastructure:"
      - echo "  ensure-tools            Install/verify deps"
      - echo "  create-kind             Create KIND cluster"
      - echo "  delete-kind             Delete KIND cluster"
      - echo ""
      - echo "üì¶ Components:"
      - echo "  install-components      All add-ons"
      - echo "  install-flux            Deploy Flux via Kustomize"
      - echo "  install-cert-manager    Deploy cert-manager + CSI driver"
      - echo "  install-kyverno         Deploy Kyverno policy engine"
      - echo "  install-envoy-gateway-operator  Deploy Envoy Gateway"
      - echo "  install-observability   [OPTIONAL] Deploy telemetry stack"
      - echo ""
      - echo "üî® CI/Development:"
      - echo "  kind-load-image         Load images into KIND"
      - echo "  kind-save-image         Save image tarball artifact"
      - echo ""
      - 'echo "For detailed help: task --list"'
      - 'echo "To run a command: task <command-name>"'

  default:
    desc: "Show help by default"
    cmds:
      - task: help
  #------------------------------------------------------------------------------
  # high-level targets
  #------------------------------------------------------------------------------
  cluster-up:
    desc: "Spin everything up"
    silent: true
    cmds:
      - echo "üöÄ Starting cluster deployment..."
      - echo ""
      - |
        # Set up error handling
        set -e
        trap 'echo "‚ùå Cluster deployment failed! Use '\''task cluster-status'\'' to check cluster state."' ERR
      - task: ensure-repo
      - task: ensure-tools
      - task: create-kind
      - task: install-components
      - echo ""
      - echo "üéâ Test infrastructure deployment complete!"
      - echo ""
      - echo "üåê Available endpoints:"
      - 'echo "   ‚Ä¢ HTTPS Gateway: https://localhost:8443"'
      - 'echo "   ‚Ä¢ Grafana:       http://localhost:30000 (after installing observability)"'
      - echo ""
      - echo "üì¶ Optional add-ons:"
      - echo "   ‚Ä¢ task install-observability"  # Deploy full telemetry stack
      - echo ""
      - echo "üöÄ Quick start:"
      - echo "   ‚Ä¢ export KUBECONFIG={{.KUBECONFIG_FILE}}"  # Connect to test-infra cluster
      - echo "   ‚Ä¢ task cluster-status"                # Check cluster health
      - echo "   ‚Ä¢ kubectl get pods --all-namespaces"  # List all pods
      - echo "   ‚Ä¢ curl -k https://localhost:8443"     # Test gateway
      - echo "   ‚Ä¢ task help"                          # See all commands

  cluster-down:
    desc: "Delete the cluster"
    cmds:
      - task: delete-kind

  cluster-reset:
    desc: "Delete and recreate cluster from scratch"
    silent: true
    cmds:
      - echo "üîÑ Resetting cluster '{{.CLUSTER_NAME}}'..."
      - task: cluster-down
      - echo "‚è≥ Waiting before recreating cluster..."
      - sleep 3
      - task: cluster-up

  #------------------------------------------------------------------------------
  # cluster status and validation
  #------------------------------------------------------------------------------
  kubectl:
    desc: "Run kubectl commands against the test-infra cluster"
    silent: true
    cmds:
      - |
        if [ ! -f "{{.KUBECONFIG_FILE}}" ]; then
          echo "‚ùå Kubeconfig not found at {{.KUBECONFIG_FILE}}"
          echo "üí° Run 'task cluster-up' first to create the cluster"
          exit 1
        fi

        kubectl --kubeconfig {{.KUBECONFIG_FILE}} {{.CLI_ARGS}}

  k9s:
    desc: "Launch k9s to browse the test-infra cluster"
    silent: true
    cmds:
      - |
        if [ ! -f "{{.KUBECONFIG_FILE}}" ]; then
          echo "‚ùå Kubeconfig not found at {{.KUBECONFIG_FILE}}"
          echo "üí° Run 'task cluster-up' first to create the cluster"
          exit 1
        fi

        if ! command -v k9s >/dev/null 2>&1; then
          echo "‚ùå k9s is not installed"
          echo "üí° Install k9s from: https://k9scli.io/topics/install/"
          exit 1
        fi

        echo "üöÄ Launching k9s for test-infra cluster..."
        echo "üìù Using kubeconfig: {{.KUBECONFIG_FILE}}"
        k9s --kubeconfig {{.KUBECONFIG_FILE}}

  cluster-status:
    desc: "Show cluster status and health"
    silent: true
    cmds:
      - echo "üîç Cluster Status Check"
      - echo ""
      - |
        if kind get clusters | grep -q "^{{.CLUSTER_NAME}}$"; then
          echo "‚úÖ KIND cluster '{{.CLUSTER_NAME}}' exists"
          echo "üìä Kubernetes version: $(kubectl version --short --client=false 2>/dev/null | grep 'Server Version' || echo 'Not accessible')"
          echo "üèóÔ∏è  Nodes:"
          kubectl get nodes --no-headers 2>/dev/null | awk '{print "   ‚Ä¢ " $1 " (" $2 ")"}' || echo "   ‚ùå Cannot access cluster"
        else
          echo "‚ùå KIND cluster '{{.CLUSTER_NAME}}' does not exist"
          exit 0
        fi
      - echo ""
      - echo "üì¶ Components:"
      - |
        components=(
          "flux-system:Flux CD"
          "cert-manager:cert-manager"
          "kyverno:Kyverno"
          "envoy-gateway-system:Envoy Gateway"
        )
        for comp in "${components[@]}"; do
          ns="${comp%:*}"
          name="${comp#*:}"
          if kubectl get ns "$ns" >/dev/null 2>&1; then
            ready=$(kubectl get pods -n "$ns" --no-headers 2>/dev/null | awk '$3=="Running" {ready++} END {print ready+0}')
            total=$(kubectl get pods -n "$ns" --no-headers 2>/dev/null | wc -l)
            if [ "$ready" -eq "$total" ] && [ "$total" -gt 0 ]; then
              echo "   ‚úÖ $name ($ready/$total pods ready)"
            else
              echo "   ‚ö†Ô∏è  $name ($ready/$total pods ready)"
            fi
          else
            echo "   ‚ùå $name (not installed)"
          fi
        done


  #------------------------------------------------------------------------------
  # granular targets
  #------------------------------------------------------------------------------
  ensure-tools:
    desc: "Install/verify deps"
    silent: true
    cmds:
      - bash {{.REPO_DIR}}/hack/ensure-tools.sh {{.TOOLS}}

  create-kind:
    desc: "Create KIND cluster"
    silent: true
    cmds:
      - echo "‚û°Ô∏è  Creating KIND cluster '{{.CLUSTER_NAME}}' ..."
      - |
        # Check if cluster already exists
        if kind get clusters | grep -q "^{{.CLUSTER_NAME}}$"; then
          echo "‚úÖ KIND cluster '{{.CLUSTER_NAME}}' already exists"
          # Validate cluster is accessible
          if kubectl cluster-info >/dev/null 2>&1; then
            echo "‚úÖ Cluster is accessible and ready"
          else
            echo "‚ö†Ô∏è  Cluster exists but is not accessible - checking..."
            kubectl cluster-info 2>&1 || echo "‚ùå Cluster may need to be recreated"
          fi
        else
          echo "üöÄ Creating new KIND cluster..."
          # Validate config file exists
          if [ ! -f "{{.KIND_CFG}}" ]; then
            echo "‚ùå KIND config file not found: {{.KIND_CFG}}"
            exit 1
          fi

          # Create cluster with error handling and custom kubeconfig
          if kind create cluster --name {{.CLUSTER_NAME}} --image kindest/node:{{.K8S_VERSION}} --config {{.KIND_CFG}} --kubeconfig {{.KUBECONFIG_FILE}}; then
            echo "‚úÖ KIND cluster created successfully"
            echo "üìù Test-infra cluster kubeconfig written to: {{.KUBECONFIG_FILE}}"

            # Wait for cluster to be ready
            echo "‚è≥ Waiting for cluster to be ready..."
            timeout_count=0
            while ! kubectl cluster-info >/dev/null 2>&1; do
              if [ $timeout_count -ge 30 ]; then
                echo "‚ùå Timeout waiting for cluster to be ready"
                exit 1
              fi
              echo "   Waiting for API server... ($timeout_count/30)"
              sleep 2
              timeout_count=$((timeout_count + 1))
            done

            echo "‚úÖ Cluster is ready and accessible"
          else
            echo "‚ùå Failed to create KIND cluster"
            exit 1
          fi
        fi
      # Always install flux to the cluster so additional components can be
      # installed using it.
      - task: install-flux

  delete-kind:
    desc: "Delete KIND cluster"
    silent: true
    cmds:
      - echo "üóëÔ∏è  Deleting KIND cluster '{{.CLUSTER_NAME}}' ..."
      - |
        if kind get clusters | grep -q "^{{.CLUSTER_NAME}}$"; then
          echo "üóëÔ∏è  Cluster exists, proceeding with deletion..."
          if kind delete cluster --name {{.CLUSTER_NAME}}; then
            echo "‚úÖ KIND cluster deleted successfully"
          else
            echo "‚ö†Ô∏è  Error during cluster deletion, but continuing..."
          fi
        else
          echo "‚ÑπÔ∏è  KIND cluster '{{.CLUSTER_NAME}}' does not exist"
        fi

        # Clean up any lingering containers
        echo "üßπ Cleaning up any leftover containers..."
        docker ps -a --filter "label=io.x-k8s.kind.cluster={{.CLUSTER_NAME}}" --format "{{.ID}}" | xargs -r docker rm -f 2>/dev/null || true

        # Clean up kubeconfig file if it exists
        if [ -f "{{.KUBECONFIG_FILE}}" ]; then
          echo "üßπ Removing test-infra cluster kubeconfig file..."
          rm -f {{.KUBECONFIG_FILE}}
        fi

        echo "‚úÖ Cleanup complete"

  install-components:
    desc: "All add-ons"
    silent: true
    deps:
      - install-cert-manager
      - install-kyverno
      - install-envoy-gateway-operator
    cmds:
      - echo "‚úÖ All cluster components installed successfully"

  install-cert-manager:
    desc: "Deploy cert-manager (+ CSI driver) via Kustomize, then wait"
    silent: true
    cmds:
      - echo "‚û°Ô∏è  Reconciling cert-manager ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/cert-manager | kubectl apply -f -
      - echo "‚è≥ Waiting for cert-manager HelmReleases ‚Ä¶"
      - kubectl -n cert-manager wait helmrelease/{cert-manager,cert-manager-csi-driver} --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚úÖ cert-manager and CSI driver are ready"

  install-flux:
    desc: "Deploy Flux via Kustomize, then wait for its controllers"
    silent: true
    cmds:
      - echo "‚û°Ô∏è  Reconciling Flux ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/flux | kubectl apply -f -
      - echo "‚è≥ Waiting for Flux controllers ‚Ä¶"
      - kubectl -n flux-system wait deployment/{source-controller,helm-controller,kustomize-controller,notification-controller} --for=condition=Available --timeout={{.WAIT_TIMEOUT}}
      - echo "‚è≥ Waiting for Flux CRDs to be ready ‚Ä¶"
      - sleep 10
      - echo "‚úÖ Flux is ready"

  install-kyverno:
    desc: "Deploy or upgrade Kyverno idempotently, then wait"
    silent: true
    cmds:
      - echo "‚û°Ô∏è  Reconciling Kyverno ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/kyverno | kubectl apply --server-side --field-manager=kyverno-installer --force-conflicts -f -
      - echo "‚è≥ Waiting for Kyverno controllers ‚Ä¶"
      - kubectl -n kyverno wait deployment/kyverno-{admission-controller,background-controller,cleanup-controller,reports-controller} --for=condition=Available --timeout={{.WAIT_TIMEOUT}}
      - echo "‚úÖ Kyverno is ready"

  install-envoy-gateway-operator:
    desc: "Deploy Envoy Gateway Operator via Kustomize, then wait"
    silent: true
    cmds:
      - echo "‚û°Ô∏è  Reconciling Envoy Gateway Operator ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/envoy-gateway-operator | kubectl apply -f -
      - echo "‚è≥ Waiting for Envoy Gateway Operator HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/envoy-gateway --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚û°Ô∏è  Applying Gateway Configuration (merged gateway setup) ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/envoy-gateway-operator/gateway-resources | kubectl apply -f -
      - echo "‚è≥ Waiting for Gateway to be ready ‚Ä¶"
      - kubectl wait --for=condition=Programmed gateway/default-gateway -n envoy-gateway-system --timeout={{.WAIT_TIMEOUT}} || true
      - echo "‚úÖ Envoy Gateway Operator and merged gateway are ready"
      - echo ""
      - echo "üåê Gateway exposed ports:"
      - 'echo "   HTTPS Gateway: https://localhost:8443 (self-signed cert - use -k flag)"'
      - echo "   To find the actual NodePort assignments, run:"
      - echo "   kubectl get svc -n envoy-gateway-system -l app.kubernetes.io/name=envoy"

  install-observability:
    desc: "[OPTIONAL] Deploy complete observability stack (Victoria Metrics, Loki, Tempo, Grafana)"
    silent: true
    cmds:
      - task: ensure-repo
      - echo "‚û°Ô∏è  Reconciling Observability Stack ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/observability | kubectl apply -f -
      - echo "‚è≥ Waiting for Grafana Operator HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/grafana-operator --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚è≥ Waiting for Victoria Metrics Stack HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/vm --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚è≥ Waiting for Loki HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/loki --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚è≥ Waiting for Tempo HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/tempo --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - echo "‚è≥ Waiting for Promtail HelmRelease ‚Ä¶"
      - kubectl -n flux-system wait helmrelease/promtail --for=condition=Ready --timeout={{.WAIT_TIMEOUT}}
      - |
        set -euo pipefail
        echo "‚è≥ Waiting for Prometheus CRDs to be Established‚Ä¶"
        for crd in \
          servicemonitors.monitoring.coreos.com \
          podmonitors.monitoring.coreos.com \
          probes.monitoring.coreos.com \
          prometheuses.monitoring.coreos.com \
          prometheusrules.monitoring.coreos.com \
          alertmanagers.monitoring.coreos.com \
          thanosrulers.monitoring.coreos.com
        do
          echo "$crd"
          kubectl wait --for=condition=Established "crd/${crd}" --timeout=120s || true
        done
      - echo "‚û°Ô∏è  Applying Grafana Instance (after Operator CRDs are ready) ‚Ä¶"
      - kubectl apply -f {{.REPO_DIR}}/components/observability/grafana-instance.yaml
      - echo "‚û°Ô∏è  Applying Grafana Datasources ‚Ä¶"
      - kustomize build {{.REPO_DIR}}/components/observability/datasources | kubectl apply -f -
      - echo "‚úÖ Observability stack is ready"
      - echo ""
      - 'echo "üìä Access Grafana at: http://localhost:30000"'
      - 'echo "   Username: admin"'
      - 'echo "   Password: datum123"'
      - echo ""
      - echo "üåê Grafana is automatically exposed via NodePort 30000"
      - echo "   No port-forwarding needed!"

  # ------------------------------------------------------------------
  # Helpers for CI
  # ------------------------------------------------------------------
  kind-load-image:
    desc: "Load one or more images into KIND"
    silent: true
    vars:
      IMAGES: '{{.IMAGES}}'
    preconditions:
      - sh: '[ -n "{{.IMAGES}}" ]'
        msg: 'ERROR: pass IMAGES="img1 img2 ..." as argument'
    cmds:
      - |
        for img in {{.IMAGES}}; do
          echo "‚û°Ô∏è  Loading $img into kind '{{.CLUSTER_NAME}}'"
          docker pull $img || true
          kind load docker-image $img --name {{.CLUSTER_NAME}}
        done

  kind-save-image:
    desc: "Save an image tarball artifact"
    silent: true
    vars:
      IMAGE: '{{.IMAGE}}'
      TAR: '{{.TAR}}'
    preconditions:
      - sh: '[ -n "{{.IMAGE}}" ]'
        msg: 'ERROR: set IMAGE=<name> as argument'
      - sh: '[ -n "{{.TAR}}" ]'
        msg: 'ERROR: set TAR=<file> as argument'
    cmds:
      - docker save "{{.IMAGE}}" | gzip > "{{.TAR}}"
